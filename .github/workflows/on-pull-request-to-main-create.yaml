name: Update Pull Request with Terraform plan

on:
  push:
    branches:    
      - 'master'
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  terraform-plan:
    name: Create Terraform plan for Azure Resources
    if:  startsWith(github.head_ref, 'main/') 
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}

    steps:
      # Checkout repository
      - name: checkout
        uses: actions/checkout@v2

      # Retrieves the Terraform CLI used in the GitHub action workflow
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      #  with:
      #    cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Checks whether the repository has been properly formatted.
      # If it isn't properly formatted this step will produce an error.
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      ## Initializes Terraform configurations.
      #- name: Terraform Init
      #  id: init
      #  run: terraform init

      ## Validates Terraform configurations.
      #- name: Terraform Validate
      #  id: validate
      #  run: terraform validate -no-color

      ## Generates a Terraform plan.
      #- name: Terraform Plan
      #  id: plan
      #  run: terraform plan -no-color
      #  continue-on-error: true

      # Adds a comment to the pull request with the results of the format, init and plan steps.
      #- name: Update Pull Request
      #  uses: actions/github-script@0.9.0
      #  env:
      #    PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }}
      #    script: |
      #      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

      #      <details><summary>Show Plan</summary>

            #\`\`\`\n
            #${process.env.PLAN}
            #\`\`\`

            #</details>

            #*Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            #github.issues.createComment({
            #  issue_number: context.issue.number,
            #  owner: context.repo.owner,
            #  repo: context.repo.repo,
            #  body: output
            #})

      ## Returns whether a plan was successfully generated or not.
      #- name: Terraform Plan Status
      #if: steps.plan.outcome == 'failure'
      #run: exit 1